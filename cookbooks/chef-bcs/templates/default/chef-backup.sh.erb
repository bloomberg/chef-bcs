#!/bin/bash
#
# Copyright 2017, Bloomberg Finance L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

function error {
  echo "ERROR: $1" >&2
  log "$1"
  echo "Terminating abnormally." >&2
  log "Terminating abnormally."
  exit 1
}

function warn {
  echo "WARNING: $1" >&2
  log "$1"
}

function check_for_bin {
  if ! which $1 >/dev/null; then
    error "$1 not found on path."
  fi
}

function log {
  if ! [ -z $BACKUP_VERBOSE ]; then
    echo "LOG: $1"
  fi
  logger -t BCPCBackup "$1"
}

# path to base directory to store backups is expected as an argument to the script
if [[ $1 == "" ]]; then
  error "You must supply the base directory to store backups as the first argument to this script."
fi
# also supply word daily, weekly or monthly to drop backup in particular frequency directory
TIME_PERIODS=( daily weekly monthly )
VALID_TIME_PERIOD_FOUND=0
for TIME_PERIOD in ${TIME_PERIODS[@]}; do
  if [[ $2 =~ $TIME_PERIOD ]]; then
    VALID_TIME_PERIOD_FOUND=1
  fi
done
if [ $VALID_TIME_PERIOD_FOUND -eq 0 ]; then
  error "You must supply daily/weekly/monthly as the second argument to this script."
fi

log "Backup mode $2 requested."

# verify that base directory is RWX for this user
if ! [[ -r $1 && -w $1 && -x $1 ]]; then
  error "User $USER does not have full access to $1."
fi

DATE=$(date +%Y%m%d)

log "Backing up for date $DATE."

BACKUP_PATH=$1/$2/$DATE
MAIN_DB_BACKUP_PATH=$BACKUP_PATH/main_db
CHEF_SERVER_BACKUP_PATH=$BACKUP_PATH/chef_server
if [ ! -d $BACKUP_PATH ]; then
  mkdir -p $BACKUP_PATH
  mkdir -p $MAIN_DB_BACKUP_PATH
  mkdir -p $CHEF_SERVER_BACKUP_PATH
  <% if @monitoring_servers.length > 0 %>
  MONITORING_DB_BACKUP_PATH=$BACKUP_PATH/monitoring_db
  mkdir -p $MONITORING_DB_BACKUP_PATH
  <% end %>
else
  warn "Directory $BACKUP_PATH already exists, attempting to continue."
fi

# back up Chef data bag
KNIFE=knife
check_for_bin $KNIFE

# ~/.chef/knife.rb must exist
if [ ! -f $HOME/.chef/knife.rb ]; then
  error "$HOME/.chef/knife.rb not found."
fi

CHEF_ENVS_RAW=$(knife data bag show configs)
CHEF_ENVS=( $CHEF_ENVS_RAW )
for CHEF_ENV in ${CHEF_ENVS[@]}; do
  DATABAG_BACKUP_PATH=$BACKUP_PATH/$CHEF_ENV-databag.json
  if [ ! -f $DATABAG_BACKUP_PATH ]; then
    $KNIFE data bag show configs -f json $CHEF_ENV > $DATABAG_BACKUP_PATH 2>/dev/null
    log "Backed up data bag for $CHEF_ENV to $DATABAG_BACKUP_PATH."
  else
    error "File $DATABAG_BACKUP_PATH already exists, refusing to overwrite."
  fi

  ENVIRONMENT_BACKUP_PATH=$BACKUP_PATH/$CHEF_ENV-environment.json
  if [ ! -f $ENVIRONMENT_BACKUP_PATH ]; then
    $KNIFE environment show -f json $CHEF_ENV > $ENVIRONMENT_BACKUP_PATH 2>/dev/null
    log "Backed up environment for $CHEF_ENV to $ENVIRONMENT_BACKUP_PATH."
  else
    error "File $ENVIRONMENT_BACKUP_PATH already exists, refusing to overwrite."
  fi
done

# back up Chef server assets per Chef documentation at
# https://docs.chef.io/server_backup_restore.html
CHEF_PG_DUMPALL=/opt/opscode/embedded/bin/pg_dumpall
check_for_bin $CHEF_PG_DUMPALL

PG_BACKUP_TMP=/tmp/chef-pgsql-$DATE.sql.bz2
sudo -E -u opscode-pgsql $CHEF_PG_DUMPALL -c 2>/dev/null | bzip2 > $PG_BACKUP_TMP
mv $PG_BACKUP_TMP $CHEF_SERVER_BACKUP_PATH

tar cjf $CHEF_SERVER_BACKUP_PATH/etc-opscode.tar.bz2 /etc/opscode 2>/dev/null
tar cjf $CHEF_SERVER_BACKUP_PATH/var-opt-opscode.tar.bz2 /var/opt/opscode 2>/dev/null

# prune old backups for currently given retention ($2)

# per original JIRA ticket EN-203, retention period is at least last 7 dailies
# and last 12 monthlies; extending to also have a weekly schedule that retains last 5
# instead of wackity find -atime/-ctime stuff, we can rely on lexical sort here
# to prune the oldest backups
case $2 in
  daily)
    BACKUPS_TO_KEEP=7
    ;;
  weekly)
    BACKUPS_TO_KEEP=5
    ;;
  monthly)
    BACKUPS_TO_KEEP=12
    ;;
esac

BACKUPS_TO_PRUNE_RAW=$(ls -1 $1/$2 | head -n -$BACKUPS_TO_KEEP)
BACKUPS_TO_PRUNE=( $BACKUPS_TO_PRUNE_RAW )

for BACKUP_TO_PRUNE in ${BACKUPS_TO_PRUNE[@]}; do
  BACKUP_DIR=$1/$2/$BACKUP_TO_PRUNE
  if [ -d $BACKUP_DIR ]; then
    rm -rf $BACKUP_DIR
    log "Purged backup directory $BACKUP_DIR."
  else
    warn "Got request to delete nonexistent directory $BACKUP_DIR."
  fi
done

# ding!
log "Backup for $DATE complete."

# Next step...Move backed up data to some other location!
