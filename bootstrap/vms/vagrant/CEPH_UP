#!/bin/bash
#
# Copyright 2017, Bloomberg Finance L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##########
# NOTE: If you run this script and receive a VBoxManage related error then most likely the VM(s) have been removed or
# missing from where you store VirtualBox VMs BUT VBoxManage still thinks they are there. Simply pull up the
# VirtualBox UI application, stop and remove the 'ceph-*' VMs that should be shown and then start this script again.
##########

# Exit immediately if anything goes wrong, instead of making things worse.
set -eu

clear

echo "   __     "
echo "   \ \    "
echo "    > \   "
echo "   / ^ \  "
echo "  /_/ \_\ "
echo
echo "Ceph Vagrant Build"
echo "--------------------------------------------"
echo "Bootstrapping local CEPH environment using Vagrant..."
echo

while getopts cbsvd:p:o:t: opt; do
    case $opt in
        b)
            BUILD_VMS_ONLY=1
            ;;
        c)
            CHEF_KNIFE_DEBUG="-VV"
            CHEF_CLIENT_DEBUG="-l debug"
            ;;
        d)
            # NB: Use this option if you need to test/debug ceph-chef. It will skip downloading the current
            # version of ceph-chef so the local version will be used. The best way to do this is to copy over
            # your modified version of ceph-chef to the cookbook directory in this project before running
            # this script.

            # BOOTSTRAP_VAGRANT_DEBUG=1
            # CEPH_DEV_MODE == 1 then install ceph github source along with development tools. You can also install your favorite IDE if you want.
            # If nothing is passed in with -d option the CEPH_DEV_MODE is empty and debug ceph-chef is used.
            CEPH_DEV_MODE=$OPTARG
            CHEF_BCS_DEBUG=1
            ;;
        o)
            BOOTSTRAP_OS=$OPTARG
            ;;
        p)
            BOOTSTRAP_HTTP_PROXY=$OPTARG
            BOOTSTRAP_HTTPS_PROXY=$OPTARG
            ;;
        s)
            BOOTSTRAP_SKIP_VMS=1
            ;;
        t)
            BOOTSTRAP_TYPE=$OPTARG
            ;;
        # verbose
        v)
            set -x
            ;;
    esac
done

source ../base_environment.sh

# Check for an existing environment_config.yaml file in /bootstrap/vms. If one exists then do nothing else copy over SAMPLE_environment_config.yaml
if [[ ! -f $REPO_ROOT/bootstrap/vms/environment_config.yaml ]]; then
  cp $REPO_ROOT/bootstrap/vms/SAMPLE_environment_config.yaml $REPO_ROOT/bootstrap/vms/environment_config.yaml
fi

# IMPORTANT!!!!!
# Copy over the Vagrantfile_bcs to Vagrantfile
# There are two Vagrantfile* files. One for building the build environment (Vagrant_build_env) and one for
# building the BCS cluster (Vagrantfile_bcs) for testing.
cp Vagrantfile_bcs Vagrantfile

export CHEF_KNIFE_DEBUG=${CHEF_KNIFE_DEBUG:-""}
export CHEF_CLIENT_DEBUG=${CHEF_CLIENT_DEBUG:-""}

export BOOTSTRAP_HTTP_PROXY=${BOOTSTRAP_HTTP_PROXY:-}
export BOOTSTRAP_HTTPS_PROXY=${BOOTSTRAP_HTTPS_PROXY:-}

# Override for other environments like production, staging etc.
export BOOTSTRAP_CHEF_ENV=${BOOTSTRAP_CHEF_ENV:-"vagrant"}
# Other types are 'bare_metal, vbox'
export BOOTSTRAP_TYPE=${BOOTSTRAP_TYPE:-"vagrant"}
# IMPORTANT: *MUST* match environment with 'chef owner' NOTE: This is also the Chef user
export CHEF_BCS_OWNER=${CHEF_BCS_OWNER:-"vagrant"}
export CHEF_BCS_GROUP=${CHEF_BCS_GROUP:-"vagrant"}
# If set then only build the vms and clone them
export BUILD_VMS_ONLY=${BUILD_VMS_ONLY:-0}
# Bootstrap specific variables
export BOOTSTRAP_SKIP_VMS=${BOOTSTRAP_SKIP_VMS:-0}
# Vagrant debug flag
export BOOTSTRAP_VAGRANT_DEBUG=${BOOTSTRAP_VAGRANT_DEBUG:-0}
export CHEF_BCS_DEBUG=${CHEF_BCS_DEBUG:-0}
export CEPH_DEV_MODE=${CEPH_DEV_MODE:-0}

# Force the banner to show
export DONT_SHOW_BANNER=0

# Perform preflight checks to validate environment sanity as much as possible.
echo "Performing preflight environment validation..."
source $REPO_ROOT/bootstrap/common/bootstrap_validate_env.sh

if [[ $BOOTSTRAP_TYPE == "vagrant" ]]; then
  # Test that Vagrant is really installed and of an appropriate version.
  if [[ $BOOTSTRAP_SKIP_VMS -ne 1 ]]; then
    echo "Checking VirtualBox and Vagrant..."
    source $REPO_ROOT/bootstrap/vms/vagrant/vagrant_test.sh
  fi
fi

# Configure and test any proxies configured.
if [[ ! -z $BOOTSTRAP_HTTP_PROXY ]] || [[ ! -z $BOOTSTRAP_HTTPS_PROXY ]] ; then
  echo "Testing configured proxies..."
  source $REPO_ROOT/bootstrap/common/bootstrap_proxy_setup.sh
fi

# Do prerequisite work prior to starting build, downloading files and
# creating local directories.
echo "Downloading necessary files to local cache..."
source $REPO_ROOT/bootstrap/common/bootstrap_prereqs.sh

if [[ $BOOTSTRAP_TYPE == "vagrant" ]]; then
  # Create VMs in Vagrant and start them.
  # VM only tests inside vagrant_create script
  echo "Clean up old VMs and Starting new local Vagrant cluster..."
  $REPO_ROOT/bootstrap/vms/vagrant/vagrant_create.sh

  # IMPORTANT: Inside vagrant_create.sh in the configure_network function the ADDING of OSD drives
  # occurs! This is important because it needes to be done while the VMs are off. Since adding network
  # adpaters also require the VM being off, putting them together saved time.

  # Reset shared folders and virtualbox guest addons since addons are required for shared folders.
  $REPO_ROOT/bootstrap/vms/vagrant/vagrant_create_shared_folders_in_vms.sh

  if [[ $BUILD_VMS_ONLY -eq 0 ]]; then
    # Install and configure Chef on all Vagrant hosts.
    echo "Installing and configuring Chef on all nodes using the all in one script."
    $REPO_ROOT/bootstrap/vms/vagrant/vagrant_configure_chef_aio.sh
  else
    echo
    echo "--------------------------------"
    echo "chef-bcs VMs have been created!"
    echo "--------------------------------"
  fi

  # Added here to refresh the environment vars only
  source vagrant_base.sh

  echo "You can access the vms using the following:"
  for vm in ${CEPH_CHEF_HOSTS[@]}; do
    echo "  vagrant ssh $vm"
  done
fi

echo "Finished in $SECONDS seconds"
