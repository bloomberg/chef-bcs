# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Copyright 2017, Bloomberg Finance L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# BUILD_ENV
# IMPORTANT - This is a Vagrantfile that *MUST* be copied FROM Vagrantfile_build_env for BUILD ENVIRONMENT

# NOTE: At the time this project started, the Vagrant fedora plugin seemed to have a bug in it's networking
# where it overroad nic1 (nat) which caused ssh to fail. So, we had to create a way to update the consistent
# naming network interfaces with the proper IPs.

require 'openssl' # used to validate CA certificates
require 'uri' # used to parse the local mirror if one is given
require 'yaml'

Vagrant.require_version ">= 1.7.4"

# NOTE: (IMPORTANT)
# NOTE: The repo_root should be the $BOOTSTRAP_CACHE_DIR so that it uses the cache path instead of wip repo
if ENV['REPO_ROOT'].nil?
    $path = File.dirname(__FILE__) + "/.."
else
    $path = "#{ENV['REPO_ROOT']}/build/github/combined/chef-bcs/bootstrap/vms"
end

environment = YAML.load_file("#{$path}/build_environment_config.yaml")
servers = YAML.load_file("#{$path}/build_servers_config.yaml")

# The storage_controller will need to be modified for different images because this gets defined when the image is created
# Ubuntu is "SATAController"

$lsb_name = environment['vagrant']['lsb_name']
$storage_controller = environment['vagrant']['storage_controller']
$http_proxy_server = environment['vagrant']['http_proxy']
$https_proxy_server = environment['vagrant']['https_proxy']
$ssl_ca_file_path = environment['vagrant']['ssl_ca_file_path']
$ssl_ca_intermediate_file_path = environment['vagrant']['ssl_ca_intermediate_file_path']
unless $ssl_ca_file_path.nil? or $ssl_ca_file_path.empty?
  $ssl_ca_file = File.basename($ssl_ca_file_path)
end
unless $ssl_ca_intermediate_file_path.nil? or $ssl_ca_intermediate_file_path.empty?
  $ssl_ca_intermediate_file = File.basename($ssl_ca_intermediate_file_path)
end

# Some settings for each VM
$vm_os = environment['vagrant']['box']
$memory = ( environment['vagrant']['memory'] or "2560" )
$cpus = ( environment['vagrant']['cpus'] or "2" )
$vram = ( environment['vagrant']['vram'] or "16" )
$disk_size = ( environment['vagrant']['disk_size'] or "20480" )

# if proxies are provided, configure them before configuring any local mirror override
# RUN THIS SCRIPT WITH sudo AND privileged = false so that $HOME is set to the
# value of the non-root user
$proxy_configuration_script = <<-EOH
  touch $HOME/proxy_config.sh
EOH

$proxy_string = ""
$bootstrap_node_name = ""

unless $http_proxy_server.nil? or $http_proxy_server.empty?
    if $lsb_name == 'centos' or $lsb_name == 'rhel'
        $bootstrap_node_name = servers.select { |k| k["roles"] == ["build"] }[0]["name"]
        $proxy_configuration_script << <<-EOH
            echo 'Defaults    env_keep += "http_proxy https_proxy no_proxy SSL_CERT_FILE"' | sudo tee -a /etc/sudoers
            echo 'export http_proxy=#{$http_proxy_server}' | sudo tee -a /etc/profile
            echo 'export https_proxy=#{$https_proxy_server}' | sudo tee -a /etc/profile
            echo 'export no_proxy=127.0.0.1,#{$bootstrap_node_name}.#{$domain}' | sudo tee -a /etc/profile
            echo 'proxy=#{$http_proxy_server};' | sudo tee -a /etc/yum.conf
            echo 'export http_proxy=#{$http_proxy_server}' | tee -a $HOME/proxy_config.sh
        EOH
    end
    $proxy_string = "export CEPH_CHEF_HTTP_PROXY=#{$http_proxy_server}\nexport CEPH_CHEF_HTTPS_PROXY=#{$https_proxy_server}\n"
end

# custom SSL CA cert support
unless $ssl_ca_file.nil? or $ssl_ca_file.empty?
  if $lsb_name == 'centos' or $lsb_name == 'rhel'
    $proxy_configuration_script << <<-EOH
        echo "export SSL_CERT_FILE='/etc/pki/ca-trust/source/anchors/chef-bcs_ca_bundle.crt'" | sudo tee -a /etc/profile
        echo "export PIP_CERT='/etc/pki/ca-trust/source/anchors/chef-bcs_ca_bundle.crt'" | sudo tee -a /etc/profile
        echo "export CURL_CA_BUNDLE='/etc/pki/ca-trust/source/anchors/chef-bcs_ca_bundle.crt'" | sudo tee -a /etc/profile
        sudo cp /tmp/#{$ssl_ca_file} /etc/pki/ca-trust/source/anchors/
        cat /tmp/#{$ssl_ca_file} | sudo tee /etc/pki/ca-trust/source/anchors/chef-bcs_ca_bundle.crt
    EOH

    unless $ssl_ssl_ca_intermediate_ediate_file.nil? or $ssl_ca_intermediate_file.empty?
      $proxy_configuration_script << <<-EOH
          sudo cp /tmp/#{$ssl_ca_intermediate_file} /etc/pki/ca-trust/source/anchors/
          cat /tmp/#{$ssl_ca_intermediate_file} | sudo tee -a /etc/pki/ca-trust/source/anchors/chef-bcs_ca_bundle.crt
      EOH
    end

    $proxy_configuration_script << <<-EOH
        sudo update-ca-trust
    EOH
  end
end

unless $https_proxy_server.nil? or $https_proxy_server.empty?
    if $lsb_name == 'centos' or $lsb_name == 'rhel'
        $proxy_configuration_script << <<-EOH
            echo 'export https_proxy=#{$https_proxy_server}' | tee -a $HOME/proxy_config.sh
        EOH
    end
end

# After other yum updates you may also need to re-install the kernel-devel-* so it's in the
# Only need this for Vagrant
if $lsb_name == 'centos' or $lsb_name == 'rhel'
    $repos_script = <<-EOH
      sudo yum install -y kernel-devel-`uname -r` gcc make perl bzip2
      sudo yum install -y epel-release rsync vim anaconda anaconda-help anaconda-runtime
      sudo yum install -y createrepo /usr/bin/yumdownloader /usr/bin/mkisofs
      sudo yum install -y python-pip python-jinja2
    EOH
else
    $repos_script = <<-EOH
      sudo apt update
    EOH
end

at_exit do
  raise $! unless $!.success?
end

Vagrant.configure("2") do |config|
  config.vm.box = $vm_os

  servers.each_with_index do |server, i|
      config.vm.define server['name'] do |machine|

        machine.vm.hostname = "#{server['name']}"

        # Fun Ceph ascii art of a squid :)
        # If this gets in the way any tools you have created then move it to machine.vm.provider :virtualbox
        puts "-" * (machine.vm.hostname.length + 14)
        puts "λ - " + machine.vm.hostname + " - λ BUILD SERVER"
        puts "-" * (machine.vm.hostname.length + 14)

        # copy custom certs to host
        unless $ssl_ca_file.nil? or $ssl_ca_file.empty?
          machine.vm.provision "file", source: "#{$path}/../../#{$ssl_ca_file_path}", destination: "/tmp/#{$ssl_ca_file}"
          unless $ssl_ca_intermediate_file.nil? or $ssl_ca_intermediate_file.empty?
            machine.vm.provision "file", source: "#{$path}/../../#{$ssl_ca_intermediate_file_path}", destination: "/tmp/#{$ssl_ca_intermediate_file}"
          end
        end

        # configure proxy servers (do not run as root)
        machine.vm.provision "configure-proxy-servers", type: "shell" do |s|
          s.privileged = false
          s.inline = $proxy_configuration_script
        end

        # Set up repositories
        # This is done here because we skip it in chef configuration PLUS there is an issue
        # where the package manager *may* update the kernel and when it does that the VBoxGuestAdditions
        # must be rebuilt to reflect the updated kernel. Also, this script will install guest addition
        # dependencies for rebuilding.
        machine.vm.provision "configure-repositories", type: "shell" do |s|
          s.inline = $repos_script
        end

        # This file will be used to check and update the vbox guest addition
        machine.vm.provision "file", source: "../vbox_check_guestaddons.sh", destination: "vbox_check_guestaddons.sh"

        # This will add a shared folder but reboot will not recognize it unless it's in fstab
        machine.vm.synced_folder("#{ENV['REPO_ROOT']}/build/github/combined/chef-bcs", "/ceph-host") unless ENV['REPO_ROOT'].nil?
        machine.vm.synced_folder(ENV['BOOTSTRAP_CACHE_DIR'], "/ceph-files") unless ENV['BOOTSTRAP_CACHE_DIR'].nil?
        machine.vm.synced_folder ".", "/vagrant", disabled: true

        machine.vm.provision "vboxfs-add-user", type: "shell" do |s|
          s.privileged = true
          s.inline = "usermod -a -G vboxsf vagrant"
        end

        machine.vm.provision "vbox-chg-permissions", type: "shell" do |s|
          s.privileged = true
          s.inline = "chmod +x vbox_check_guestaddons.sh"
        end

        machine.vm.provider :virtualbox do |vb|
          vb.name = "#{server['name']}"
          vm_name = vb.name

          vb.customize ["modifyvm", :id, "--memory", $memory]
          vb.customize ["modifyvm", :id, "--vram", $vram]
          vb.customize ["modifyvm", :id, "--cpus", $cpus]
          vb.customize ["modifyvm", :id, "--largepages", "on"]
          vb.customize ["modifyvm", :id, "--nestedpaging", "on"]
          vb.customize ["modifyvm", :id, "--vtxvpid", "on"]
          vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
          vb.customize ["modifyvm", :id, "--ioapic", "on"]

        end # machine.vm.provider

      end # config.vm.define
  end # servers list
end
