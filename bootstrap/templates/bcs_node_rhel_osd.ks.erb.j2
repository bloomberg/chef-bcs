####################################
# kickstart template for Chef-BCS Nodes of OSD nodes. If a given node has an OSD role then it must use this kickstart.
# Whatever is not found below then Cobbler 'fills in' the missing pieces such as networking.

# System authorization information
auth  --enableshadow  --passalgo=sha512

eula --agreed

# System bootloader configuration
# Use grub2-mkpasswd-pbkdf2 to generate cryptic password for security
# --append=" crashkernel=auto"
bootloader --location=mbr --driveorder=sdm --boot-drive=sdm <%= node['chef-bcs']['cobbler']['kickstart']['bootloader']['passwd_type'] %> <%= node['chef-bcs']['cobbler']['kickstart']['bootloader']['passwd'] %>

# Partition clearing information
clearpart --all --initlabel

# Use text mode install
text

# Firewall configuration
firewall --disable

# Run the Setup Agent on first boot
firstboot --disable

# System keyboard
keyboard us

# System language
lang en_US

# If any cobbler repo definitions were referenced in the kickstart profile, include them here.
$yum_repo_stanza
# Network information
$SNIPPET('network_config')

# Reboot after installation
reboot

# To create encrypted pwd: python -c 'import crypt; print(crypt.crypt("password", "$6$Salt"))' - Make 'password' whatever password you want and then run the python script
# For example: vagrant password would be $6$Salt$6AyUczFy6SgV8A2wKAKfA9drpzrUsTGPJ3QjcWBbgS97BxBO.C7ZcBFALRiRkKfi9x8MK2SHet38BCQWS9LsR/
#Root password
rootpw <%= node['chef-bcs']['cobbler']['kickstart']['root']['passwd_type'] %> <%= node['chef-bcs']['cobbler']['kickstart']['root']['passwd'] %>

#User(s)
<% node['chef-bcs']['cobbler']['kickstart']['users'].each do | usr | %>
user --name=<%= usr['name'] %> <%= usr['passwd_type'] %> --password=<%= usr['passwd'] %> --shell=<%= usr['shell'] %> --gecos="<%= usr['comment'] %>" --groups=<%= usr['groups'] %>
<% end -%>

# SELinux configuration
selinux --disabled

# Do not configure the X Window System
skipx

# System timezone
timezone UTC --isUtc --ntpservers={{ ntp[0] }},{{ ntp[1] }}

# Install OS instead of upgrade
install

# Use network installation
url --url=$tree

# Clear the Master Boot Record
zerombr

# Important: If you need other drives partitioned then change the 'partition_option' in the data and remove 'ignoredisk'
# ignoredisk --drives=sdb,sdc
# ignoredisk --only-use=sdm
<%= node['chef-bcs']['cobbler']['partition_option'] %>
<% if node['chef-bcs']['cobbler']['raid'] %>
<% node['chef-bcs']['cobbler']['raid_partitions'].each do |raid_par| %>
<%= raid_par['raid'] %>
<% end %>
<% else %>
<% node['chef-bcs']['cobbler']['partitions'].each do |par| %>
part <%= par['part'] %> --fstype=<%= par['fstype'] %> --size=<%= par['size'] %> <%= par['options'] %>
<% end %>
<% end %>

%pre
$SNIPPET('log_ks_pre')
$SNIPPET('autoinstall_start')
$SNIPPET('pre_install_network_config')
# Enable installation monitoring
$SNIPPET('pre_anamon')
%end

%packages --nobase --ignoremissing
<% if node['chef-bcs']['cobbler']['os']['name'] == 'centos-7' %>
# CentOS
@Infrastructure Server
# CentOS end
<% else %>
# RHEL begin
@^infrastructure-server-environment
# RHEL end
<% end -%>
gdisk
wget
curl
iputils
man
net-tools
ntp
ntpdate
parted
kexec-tools
vim
tmux
git
%end

%post --nochroot
$SNIPPET('log_ks_post_nochroot')
# Logging is set up if needed
exec 1>/mnt/sysimage/root/kickstart-stage1.log 2>&1

mkdir /mnt/sysimage/ceph-files
mkdir /mnt/sysimage/ceph-host

%end

%post --log=/root/kickstart-stage2.log
$SNIPPET('log_ks_post')

# Start yum configuration
$yum_config_stanza
# End yum configuration

$SNIPPET('post_install_kernel_options')
$SNIPPET('post_install_network_config')
$SNIPPET('download_config_files')
$SNIPPET('koan_environment')
$SNIPPET('redhat_register')
$SNIPPET('cobbler_register')
# Enable post-install boot notification
$SNIPPET('post_anamon')
# Start final steps
# Sets the --netboot flag for the host on cobbler
$SNIPPET('kickstart_done')

#!/bin/sh
set -x

# With Cobbler, you can't simply cp files in --nochroot like you can with a mount device
wget http://{{ node.ip }}/cblr/pub/postinstall.tar.gz -O /tmp/postinstall.tar.gz
tar -zxvf /tmp/postinstall.tar.gz -C /
find /tmp -name TRANS.TBL -exec rm -f {} \;

groupadd {{ user.name }}
useradd {{ user.name }} -g {{ user.name }} -G wheel

cp -R /tmp/postinstall/ceph-files/* /ceph-files/.
cp -R /tmp/postinstall/ceph-host/* /ceph-host/.

chown -R {{ user.name }}:{{ user.name }} /ceph-files
chown -R {{ user.name }}:{{ user.name }} /ceph-host

cat /ceph-host/bootstrap/data/environment/{{ node.environment }}/hosts >> /etc/hosts
cp /ceph-files/gems/netaddr-1.5.1.gem /tmp/.
chown {{ user.name }}:{{ user.name }} /tmp/netaddr-1.5.1.gem
cp /ceph-files/gems/chef-sugar-3.4.0.gem /tmp/.
chown {{ user.name }}:{{ user.name }} /tmp/chef-sugar-3.4.0.gem

# Allow root login to begin with. Chef recipe will disable later in process.
sed -i "s/#PermitRootLogin yes/PermitRootLogin yes/" /etc/ssh/sshd_config
sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config

# Add a public key here to authorized_keys but make sure to set permission to 0600
mkdir --mode=0700 -p /home/{{ user.name }}/.ssh
cat <<EOM >/home/{{ user.name }}/.ssh/authorized_keys
{{ user.key }}
EOM
chmod 0600 /home/{{ user.name }}/.ssh/authorized_keys
chown -R {{ user.name }}:{{ user.group }} /home/{{ user.name }}/.ssh

# Setup sudoer
echo "%{{ user.name }} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/{{ user.name }}
sed -i "s/^[^#].*requiretty/#Defaults requiretty/" /etc/sudoers
echo "{{ user.name }} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/{{ user.name }}

{%- if cobbler.kickstart.redhat.management.type %}
{{ cobbler.kickstart.redhat.management.commands.C1 }}
{{ cobbler.kickstart.redhat.management.commands.C2 }}
{{ cobbler.kickstart.redhat.management.commands.C3 }}
yum update -y
# Go ahead and create a script in /tmp if the network has issues during the process.
cat <<EOM >/tmp/rhelsub.sh
service network restart
{{ cobbler.kickstart.redhat.management.commands.C1 }}
{{ cobbler.kickstart.redhat.management.commands.C2 }}
{{ cobbler.kickstart.redhat.management.commands.C3 }}
yum update -y
EOM
chmod +x /tmp/rhelsub.sh
{% endif %}

cp /ceph-host/bootstrap/data/environment/{{ node.environment }}/*.crt /tmp
cp /ceph-host/bootstrap/data/environment/{{ node.environment }}/*.key /tmp

rpm -Uvh /ceph-files/rpms/{{ chef.rpms.client }}

# Set up the node for chef-client
mkdir -p /etc/chef
mkdir -p /var/log/chef
wget http://{{ node.ip }}/cblr/pub/validation.pem -O /etc/chef/validation.pem
wget http://{{ node.ip }}/cblr/pub/client.rb -O /etc/chef/client.rb
chmod 0600 /etc/chef/validation.pem
chmod 0644 /etc/chef/client.rb
knife ssl fetch -c /etc/chef/client.rb
chef-client
/opt/chef/embedded/bin/gem install --force --local /tmp/netaddr-1.5.1.gem
/opt/chef/embedded/bin/gem install --force --local /tmp/chef-sugar-3.4.0.gem

cat <<EOM >/tmp/chef-enroll.sh
yum update -y
cp /ceph-host/bootstrap/data/environment/{{ node.environment }}/*.crt /tmp

rpm -Uvh /ceph-files/rpms/{{ chef.rpms.client }}

# Set up the node for chef-client
mkdir -p /etc/chef
mkdir -p /var/log/chef
wget http://{{ node.ip }}/cblr/pub/validation.pem -O /etc/chef/validation.pem
wget http://{{ node.ip }}/cblr/pub/client.rb -O /etc/chef/client.rb
chmod 0600 /etc/chef/validation.pem
chmod 0644 /etc/chef/client.rb
knife ssl fetch -c /etc/chef/client.rb
chef-client
/opt/chef/embedded/bin/gem install --force --local /tmp/netaddr-1.5.1.gem
/opt/chef/embedded/bin/gem install --force --local /tmp/chef-sugar-3.4.0.gem
EOM

chmod +x /tmp/chef-enroll.sh

# Sanity check for nics - Depending on nic, they may need a onetime restart so just do it and have it remove itself
cat <<EOM >/etc/init.d/onetime.sh
#!/bin/bash
sudo service network restart
# Delete me $0
sudo systemctl disable onetime
sudo rm /etc/systemd/system/onetime.service
sudo rm -f /etc/init.d/onetime.sh
EOM
chmod +x /etc/init.d/onetime.sh

# Create systemd unit file
cat <<EOM >/etc/systemd/system/onetime.service
[Unit]
Description=Restart Network

[Service]
Type=oneshot
ExecStart=/etc/init.d/onetime.sh

[Install]
WantedBy=multi-user.target
EOM

systemctl enable onetime

# End final steps
%end
